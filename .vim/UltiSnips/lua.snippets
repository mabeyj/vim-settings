extends brackets

# Value keywords
snippet F "False" w
false
endsnippet

snippet T "True" w
true
endsnippet

snippet N "Nil" w
nil
endsnippet

# Comments
snippet fd "File doc comment" b
---
-- $2
--
-- @author $1
endsnippet

snippet d "Doc comment" b
---
-- $1
endsnippet

snippet "-- p" "@param" b
-- @param ${1:name}  $2
endsnippet

snippet "-- r" "@return" b
-- @return $1
endsnippet

snippet "-- s" "@see" b
-- @see $1
endsnippet

snippet "-- u" "@usage" b
-- @usage $1
endsnippet

# Functions
snippet fn "Function" b
function ${1:function_name}($2)
	$3
end
endsnippet

snippet afn "Anonymous function"
function($1)
	$2
end
endsnippet

# Control flow
snippet b "Break" b
break
endsnippet

snippet r "Return" b
return $1
endsnippet

# Output
snippet p "Print statement" b
print($1)
endsnippet

# If-else blocks
snippet i "If statement" b
if ${1:expression}
then
	$2
end
endsnippet

snippet ei "Else-if block" b
elseif ${1:expression}
then
	$2
endsnippet

snippet e "Else block" b
else
	$1
endsnippet

# Loops
snippet f "For loop" b
for ${1:i} = ${2:start_exp}, ${3:end_exp}
do
	$4
end
endsnippet

snippet fs "For loop with step" b
for ${1:i} = ${2:start_exp}, ${3:end_exp}, ${4:step_exp}
do
	$5
end
endsnippet

snippet w "While loop" b
while ${1:expression}
do
	$2
endsnippet

snippet do "Repeat-until loop" b
repeat
	$2
until ${1:expression}
endsnippet
