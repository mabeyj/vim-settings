# Value keywords
snippet F
	false
snippet T
	true
snippet N
	null
snippet U
	undefined
# Brackets/braces
snippet dd
	{${1}}
snippet ddj
	{${1}};
snippet ff
	{ 
		${1}	
	}
snippet ffj
	{
		${1}
	};
snippet kk
	(${1})
snippet kkf
	(${1});
snippet jj
	(
		${1}
	)
snippet jjf
	(
		${1}
	);
# Comments
snippet d
	/**
	 * ${1}
	 */
snippet dp
	@param {${1:type}} ${2:name}  ${3}
snippet dr
	@returns {${1:type}}  ${2}
snippet ds
	@see ${1:element}
snippet dsi
	@since ${1:version}
snippet dt
	@throws {${1:type}}  ${2}
snippet dv
	@type ${1}
# Output
snippet cl
	console.log(${1});
snippet cd
	console.dir(${1});
# Operators
snippet 3
	${1:/* condition */} ? ${2:/* if true */} : ${3:/* if false */}
snippet 33
	${1:/* condition */}
		? ${2:/* if true */}
		: ${3:/* if false */}
# Arrays
snippet a
	[${1}]
snippet aj
	[${1}];
snippet aa
	[
		${1}
	]
snippet aaj
	[
		${1}
	];
snippet k
	${1:key}: ${2},${3}
# Functions
snippet fn
	function ${1:functionName}(${2})
	{
		${3}
	}
snippet afn
	function(${1})
	{
		${2}
	}
# Control flow
snippet b
	break;
snippet co
	continue;
snippet r
	return ${1};
# If-else blocks
snippet i
	if (${1:/* condition */})
	{
		${2}
	}
snippet i1
	if (${1:/* condition */})
		${2}
snippet ei
	else if (${1:/* condition */})
	{
		${2}	
	}
snippet ei1
	else if (${1:/* condition */})
		${2}		
snippet e
	else
	{
		${1}	
	}
snippet e1
	else
		${1}
# Switch blocks
snippet s
	switch (${1:variable})
	{
		default:
		${2}
	}
snippet ca
	case ${1}:
		${2}
		break;
# Loops
snippet f
	for (var ${1:i} = ${2:0}; ${3:/* condition */}; $1++)
	{
		${4}	
	}
snippet fe
	for (var ${1:i} in ${2:array})
	{
		${3}	
	}
snippet do
	do
	{
		${2}
	} while (${1:/* condition */});
snippet w
	while (${1:/* condition */})
	{
		${2}
	}
# Exceptions
snippet t
	throw new ${1:ExceptionType}(${2});
snippet tc
	try
	{
		${1}	
	}
	catch (exception)
	{
		
	}
# jQuery snippets
snippet drf
	$(function()
	{
		${1}	
	});
snippet j
	$('${1}')${2}
